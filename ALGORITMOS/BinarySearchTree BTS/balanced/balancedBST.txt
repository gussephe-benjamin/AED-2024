#include<vector>

  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
 

class Solution {
public:
    // Función para hacer un recorrido en inorden del árbol
    void inorderTraversal(TreeNode* root, vector<int>& nodes) {
        if (!root) return;
        inorderTraversal(root->left, nodes);
        nodes.push_back(root->val);
        inorderTraversal(root->right, nodes);
    }

    // Función recursiva para construir un árbol balanceado a partir de un array ordenado
    TreeNode* buildBalancedBST(vector<int>& nodes, int left, int right) {
        if (left > right) return nullptr;

        // Encontramos el elemento del medio
        int mid = left + (right - left) / 2;
        TreeNode* root = new TreeNode(nodes[mid]);

        // Construimos recursivamente los subárboles izquierdo y derecho
        root->left = buildBalancedBST(nodes, left, mid - 1);
        root->right = buildBalancedBST(nodes, mid + 1, right);

        return root;
    }

    // Función principal para balancear el BST
    TreeNode* balanceBST(TreeNode* root) {
        // Paso 1: Obtener los nodos en orden ascendente
        vector<int> nodes;
        inorderTraversal(root, nodes);

        // Paso 2: Construir un árbol balanceado desde el array ordenado
        return buildBalancedBST(nodes, 0, nodes.size() - 1);
    }
};
