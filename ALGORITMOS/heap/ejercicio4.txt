#include <vector>
#include <iostream>
using namespace std;

template <typename T>
class MinHeap {
private:
    T* arr;
    int capacity;
    int size;

    void heapifyUp(int index) {
        if (index && arr[parent(index)] > arr[index]) {
            swap(arr[index], arr[parent(index)]);
            heapifyUp(parent(index));
        }
    }

    void heapifyDown(int index) {
        int left = leftChild(index);
        int right = rightChild(index);
        int smallest = index;

        if (left < size && arr[left] < arr[smallest])
            smallest = left;

        if (right < size && arr[right] < arr[smallest])
            smallest = right;

        if (smallest != index) {
            swap(arr[index], arr[smallest]);
            heapifyDown(smallest);
        }
    }

    int parent(int i) { return (i - 1) / 2; }
    int leftChild(int i) { return 2 * i + 1; }
    int rightChild(int i) { return 2 * i + 2; }

    void swap(T& a, T& b) {
        T temp = a;
        a = b;
        b = temp;
    }

    void resize() {
        int newCapacity = capacity * 2;
        T* newArray = new T[newCapacity];

        for (int i = 0; i < size; i++) {
            newArray[i] = arr[i];
        }

        delete[] arr;
        arr = newArray;
        capacity = newCapacity;
    }

public:
    MinHeap() {
        size = 0;
        capacity = 10;
        arr = new T[capacity];
    }

    ~MinHeap() {
        delete[] arr;
    }

    void insert(T key) {
        if (size == capacity) {
            resize();
        }

        size++;
        int index = size - 1;
        arr[index] = key;
        heapifyUp(index);
    }

    T extractMin() {
        if (size <= 0) {
            return T();
        }
        if (size == 1) {
            size--;
            return arr[0];
        }

        T root = arr[0];
        arr[0] = arr[size - 1];
        size--;
        heapifyDown(0);

        return root;
    }

    T getMin() {
        if (size <= 0) {
            return T();
        }
        return arr[0];
    }

    bool isEmpty() {
        return size == 0;
    }
};


struct MatrixElement {
    int value;
    int row;
    int col;


    bool operator>(const MatrixElement& other) const {
        return value > other.value;
    }

    bool operator<(const MatrixElement& other) const {
        return value < other.value;
    }
};

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        MinHeap<MatrixElement> minHeap;


        for (int i = 0; i < n; i++) {
            minHeap.insert({matrix[i][0], i, 0});
        }

   
        MatrixElement curr;
        for (int i = 0; i < k; i++) {
            curr = minHeap.extractMin();

          
            if (curr.col + 1 < n) {
                minHeap.insert({matrix[curr.row][curr.col + 1], curr.row, curr.col + 1});
            }
        }

       
        return curr.value;
    }
};